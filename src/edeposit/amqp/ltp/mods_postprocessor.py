#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
# Interpreter version: python 2.7
#
"""
Fix bugs in MODS file generated by XSLT template.

API
---
"""
# Imports =====================================================================
import dhtmlparser


# Functions & objects =========================================================
def postprocess_mods(mods, package_id):
    """
    Fix bugs in `mods` produced by XSLT template.

    Args:
        mods (str): XML string generated by XSLT template.
        package_id (str): UUID of the package.

    Returns:
        str: Updated string.
    """
    dom = dhtmlparser.parseString(mods)
    dhtmlparser.makeDoubleLinked(dom)

    # add missing parameter
    mods_tag = dom.find("mods:mods")
    if mods_tag:
        mods_tag[0].params["ID"] = "MODS_TITLE_0001"

    # fix invalid type= paramater
    placeterm_tag = dom.match(
        "mods:originInfo",
        "mods:place",
        ["mods:placeTerm", {"authority": "marccountry"}]
    )
    if placeterm_tag:
        placeterm_tag[0].params["type"] = "code"

    # add identifier to the section with identifiers
    uuid_tag = dhtmlparser.HTMLElement(
        "mods:identifier",
        {"type": "uuid"},
        [dhtmlparser.HTMLElement(package_id)]
    )

    identifier = dom.find("mods:identifier")
    if identifier:
        identifier = identifier[0]

        # put it before first existing identifier
        parent = identifier.parent
        iop = parent.childs.index(identifier)
        parent.childs.insert(
            iop,
            uuid_tag
        )
    else:
        mods_tag.childs.append(uuid_tag)

    return dom.prettify()
