package marcxml2mods {
    class xslt_transformer as "xslt_transformer.py" <<M, Green>> {
        Used to transform Aleph's metadata to MODS.
    }
    package mods_postprocessor {
        class shared_funcs as "shared_funcs.py" <<M, Green>> {
            Functions shared in mods_postprocessor/ module.

            remove_hairs()
        }
    }
}

class fn_composers as "fn_composers.py" <<M, Green>> {
    Dynamically creates filenames.

    original_fn(book_id, ebook_fn)
    metadata_fn(book_id)
    volume_fn(cnt)
    checksum_fn(book_id)
    info_fn(book_id)
}

class checksum_generator as "checksum_generator.py" <<M, Green>> {
    Generates checksums for all files in SIP
    package.

    generate_checksums(directory, blacklist)
    generate_hashfile(directory, blacklist)
}

class settings as "settings.py" <<M, Green>> {
    Project settings.

    get_all_constants()
    substitute_globals(config_dict)
}

class structures as "structures.py" <<M, Green>> {
    AMQP communication structures.
    ---
    class ExportRequest
    class TrackingRequest
    class TrackingState
    class TrackingResult
}

class info_composer as "info_composer.py" <<M, Green>> {
    Create the info.xml file.

    compose_info(root_dir, files, hash_fn, aleph_record)
}

class ltp as "ltp.py" <<M, Green>> {
    Creates SIP package for LTP.

    create_ltp_package(aleph_record, book_id, ebook_fn, b64_data)
}

class init as "_â€‹_init__.py" <<M, Green>> {
    Handles AMQP communication.

    reactToAMQPMessage(message, send_back)
}

shared_funcs -d----> info_composer: uses remove_hairs()
xslt_transformer <--d-> ltp: transforms MARC XML to MODS

settings -l-> ltp

fn_composers -d-> ltp
info_composer -r-> ltp
checksum_generator -d-> ltp

ltp -d-> init
structures -l-> init
settings -d-> init