package marcxml2mods {
    class xslt_transformer as "xslt_transformer.py" <<M, Green>> {
        Used to transform Aleph's metadata to MODS.
    }
    package mods_postprocessor {
        class shared_funcs as "shared_funcs.py" <<M, Green>> {
            Functions shared in mods_postprocessor/ module.

            remove_hairs()
        }
    }
}

class fn_composers as "fn_composers.py" <<M, Green>> {
    Dynamically creates filenames.

    $templater:module:fn_composers
}

class checksum_generator as "checksum_generator.py" <<M, Green>> {
    Generates checksums for all files in SIP
    package.

    $templater:module:checksum_generator
}

class settings as "settings.py" <<M, Green>> {
    Project settings.

    $templater:module:settings
}

class structures as "structures.py" <<M, Green>> {
    AMQP communication structures.
    ---
    $templater:module:structures
}

class info_composer as "info_composer.py" <<M, Green>> {
    Create the info.xml file.

    $templater:module:info_composer
}

class ltp as "ltp.py" <<M, Green>> {
    Creates SIP package for LTP.

    $templater:module:ltp
}

class init as "_â€‹_init__.py" <<M, Green>> {
    Handles AMQP communication.

    $templater:module:__init__
}

shared_funcs -d----> info_composer: uses remove_hairs()
xslt_transformer <--d-> ltp: transforms MARC XML to MODS

settings -l-> ltp

fn_composers -d-> ltp
info_composer -r-> ltp
checksum_generator -d-> ltp

ltp -d-> init
structures -l-> init
settings -d-> init